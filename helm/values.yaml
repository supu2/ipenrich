# Default values for helm.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: nginx
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: 
  # capabilities:
  #   drop:
  #   - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 100

## @param LivenessProbe Override default liveness probe
##
LivenessProbe: {}
## @param ReadinessProbe Override default readiness probe
##
ReadinessProbe: {}

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: 
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi
  limits:
    cpu: 1000m
    memory: 1280Mi
  requests:
    cpu: 100m
    memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

serviceMonitor:
  enabled: false

networkPolicy:
  enabled: false
  egressRules: []
  ingressRules: 
    - selectors:
        - namespaceSelector:
            matchLabels:
              "kubernetes.io/metadata.name": "ingress-nginx"
        - namespaceSelector:
            matchLabels:
              "kubernetes.io/metadata.name": "monitoring"        
      ports:
        - protocol: TCP
          port: 8000

prometheusRule:
  ## @param prometheusRule.enabled Create a PrometheusRule for Prometheus Operator
  ##
  enabled: false
  rules:
    - alert: IpenrichLatencyHighP50
      expr: ipenrich_request_durations{quantile="0.5"}  > 0.5 
      for: 15m
      labels:
        severity: warning
      annotations:
        summary: Ipenrich latency high 
        description: "Ipenrich p50 latency is higher than 0.5 seconds"
    - alert: IpenrichLatencyHighP90
      expr: ipenrich_request_durations{quantile="0.9"}  > 1 
      for: 10m
      labels:
        severity: warning
      annotations:
        summary: Ipenrich latency high 
        description: "Ipenrich p90 latency is higher than 1 seconds"
    - alert: IpenrichLatencyHighP99
      expr: ipenrich_request_durations{quantile="0.99"}  > 3 
      for: 5m
      labels:
        severity: warning
      annotations:
        summary: Ipenrich latency high 
        description: "Ipenrich p99 latency is higher than 3 seconds"